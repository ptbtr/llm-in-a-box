#!/usr/bin/env python3
import concurrent.futures
import contextlib
from http.client import RemoteDisconnected
import json
from pathlib import Path
import random
import subprocess
import threading
import time
import urllib.error
import urllib.request
from typing import Iterator

HOST = "http://localhost:8000"


def restart_worker(compose_file: Path) -> None:
    while True:
        time.sleep(random.randint(1, 30))
        print("Restarting the server")
        subprocess.check_call([
	    "docker",
            "compose",
            f"--file={compose_file}",
            "restart",
            "worker",
        ])


def call_succeeded(url: str) -> None:
    data = json.dumps({"prompt": "hello, world!"}).encode()
    try:
        urllib.request.urlopen(url, data=data)
        return True
    except urllib.error.HTTPError:
        return False


def ping_server(url: str) -> None:
    successes = 0
    failures = 0
    with concurrent.futures.ThreadPoolExecutor(max_workers=4) as executor:
        futures = [executor.submit(call_succeeded, url) for _ in range(100)]
        for future in concurrent.futures.as_completed(futures):
            succeeded = future.result()
            if succeeded:
                successes += 1
            else:
                failures += 1
            print(f"{successes} succeeded; {failures} failures")


def main() -> None:
    compose_file = Path(__file__).resolve().parent.parent / "app" / "docker-compose.yml"
    for _ in range(10):
        try:
            urllib.request.urlopen(f"{HOST}/ready")
        except RemoteDisconnected:
            time.sleep(1)
        else:
            break

    restart_thread = threading.Thread(
        target=restart_worker, args=(compose_file,), daemon=True,
    )
    restart_thread.start()
    ping_server(f"{HOST}/completions")


if __name__ == "__main__":
    main()
